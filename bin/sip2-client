#!/usr/bin/perl
#:vim:ft=perl
# -----------------------------------------------------------------------
# Copyright (C) 2020 King County Library System
# Bill Erickson <berickxx@gmail.com>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# -----------------------------------------------------------------------
use strict;
use warnings;
use Getopt::Long;
use Time::HiRes qw/time/;
use SIP2Mediator::Client;
use SIP2Mediator::Message;
use SIP2Mediator::Spec;
use SIP2Mediator::Field;
use SIP2Mediator::FixedField;

my $client; # SIP connection

my $pretty_print;
my $sip_address   = '127.0.0.1';
my $sip_port      = 6001;
my $sip_username;
my $sip_password;
my $institution;
my @messages;
my $repeat = 1;
my $sleep;
my $summarize;
my $silent;

my $current_location; # library name/code
my $item_barcode;
my $patron_barcode;
my $patron_password;
my $patron_summary = ' 'x10;
my $with_cancel;

sub usage {
    my $exit = shift || 0;
    my $msg = shift;

    print <<USAGE;

Synopsis:

    $0 --sip-address $sip_address --sip-port $sip_port \
       --sip-username siplogin --sip-password sippassword \
       --institution myplace --item-barcode 123456789 \
       --patron-barcode 987654321 --patron-password demo123
       --message item-information --message patron-information
       --message patron-status

Options:

    --pretty-print
        Print SIP messages as tabular key/value pairs.  
        Otherwise, raw SIP messages are printed.

    --sip-address <$sip_address>
        Listen address for SIP server.

    --sip-port <$sip_port>
        List port for SIP server.

    --sip-username <username>
    --sip-password <password>

    --current-location <library-code>
        Branch name/code that indicates the physical location of the
        SIP action.

    --item-barcode <barcode>
    --patron-barcode <barcode>
    --patron-password <password>

    --patron-summary <10-chars>
        Override the 'patron summary' string for the Patron Information
        request.  Useful for requesting additional data in the response.
        E.g. to request hold items: --patron-summary "Y         "

    --with-cancel
        Send the SIP 'BI' ("cancel") field during checkin or checkout.
        
    --message <message-name>; repeatable
        Supported values:
        'sc-status'
        'item-information'
        'patron-information'
        'patron-status'
        'checkin'

    --repeat <count>
        Repeat each --message this many times.  Useful for load testing.
        This is equivalent to passing multiple --message values.

    --sleep <seconds>
        Sleep this long between requests.  Useful for spreading load
        in a more realistic way.

    --summarize
        Print limited summary information instead of SIP messages

    --silent
        Don't print anything.

USAGE

    warn "\n! $msg !\n" if $msg;

    exit($exit);
}

sub send_recv {
    my $msg_hash = shift;

    my $msg = SIP2Mediator::Message->from_hash($msg_hash);
    $| = 1;

    if (!$silent) {
        if ($summarize) {
            print '+';
        } else {
            print sprintf("[SENDING]\n%s\n----------------\n", 
                $pretty_print ? $msg->to_str : $msg->to_sip);
        }
    }

    my $start = time();
    $client->send($msg);

    my $resp = $client->recv;
    my $duration = sprintf("%0.3f", time() - $start);

    die "No response received!\n" unless $resp;

    if (!$silent) {
        if ($summarize) {
            print '-';
        } else {
            print sprintf("[RECEIVED, duration: %s]:\n%s\n----------------\n", 
                $duration, $pretty_print ? $resp->to_str : $resp->to_sip);
        }
    }
}

sub login {
    send_recv({
        code => 93,
        fixed_fields => ['0', '0'],
        fields => [{CN => $sip_username}, {CO => $sip_password}]
    });
}

sub sc_status {
    send_recv({
        code => 99,
        fixed_fields => ['0', '999', '2.00']
    });
}

sub item_information {

    die "--item-barcode required for item-information\n" unless $item_barcode;

    send_recv({
        code => 17,
        fixed_fields => [SIP2Mediator::Spec->sip_date],
        fields => [{AO => $institution}, {AB => $item_barcode}]
    });
}

sub checkin {
    die "--item-barcode required for checkin\n" unless $item_barcode;

    send_recv({
        code => '09',
        fixed_fields => [
            'N', 
            SIP2Mediator::Spec->sip_date,
            SIP2Mediator::Spec->sip_date
        ],
        fields => [
            {AP => $current_location},
            {AO => $institution}, 
            {AB => $item_barcode},
            $with_cancel ? {BI => 'Y'} : ()
        ]
    });
}

sub patron_status {

    die "--patron-barcode required for patron-status\n" unless $patron_barcode;

    send_recv({
        code => '23',
        fixed_fields => ['000', SIP2Mediator::Spec->sip_date],
        fields => [{AO => $institution}, {AA => $patron_barcode}]
    });
}

sub patron_information {

    die "--patron-barcode required for patron-information\n" unless $patron_barcode;

    send_recv({
        code => '63',
        fixed_fields => [
            '000', # Language
            SIP2Mediator::Spec->sip_date,
            $patron_summary
        ],
        fields => [
            {AO => $institution}, 
            {AA => $patron_barcode},
            $patron_password ? {AD => $patron_password} : ()
        ]
    });
}

GetOptions(
    'pretty-print'      => \$pretty_print,
    'sip-address=s'     => \$sip_address,
    'sip-port=s'        => \$sip_port,
    'sip-username=s'    => \$sip_username,
    'sip-password=s'    => \$sip_password,
    'institution=s'     => \$institution,
    'current-location=s'=> \$current_location,
    'item-barcode=s'    => \$item_barcode,
    'patron-barcode=s'  => \$patron_barcode,
    'patron-password=s' => \$patron_password,
    'patron-summary=s'  => \$patron_summary,
    'with-cancel'       => \$with_cancel,
    'message=s'         => \@messages,
    'repeat=s'          => \$repeat,
    'sleep=s'           => \$sleep,
    'summarize'         => \$summarize,
    'silent'            => \$silent,
    'help'              => sub { usage(0); }
) or usage(1);

usage(1, "--sip-address required")  unless $sip_address;
usage(1, "--sip-port required")     unless $sip_port;
usage(1, "--sip-username required") unless $sip_username;
usage(1, "--sip-password required") unless $sip_password;
usage(1, "--institution required")  unless $institution;
usage(1, "Patron summary string must be 10 characters")
    if ($patron_summary && length($patron_summary) != 10);

$client = SIP2Mediator::Client->new({
    sip_address => $sip_address,
    sip_port => $sip_port
});

die "Client unable to connect\n" unless $client->connect;

login();

my $start = time();
for my $msg (@messages) {
    for (0 .. ($repeat - 1)) {
        sc_status() if $msg eq 'sc-status';
        item_information() if $msg eq 'item-information';
        patron_information() if $msg eq 'patron-information';
        patron_status() if $msg eq 'patron-status';
        checkin() if $msg eq 'checkin';
        sleep($sleep) if $sleep;
    }
}
my $duration = time() - $start;
print sprintf("\nRun time: %0.3f\n", $duration) unless $silent;

$client->disconnect;

